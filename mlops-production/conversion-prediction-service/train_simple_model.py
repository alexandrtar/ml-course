# train_simple_model.py
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_auc_score, classification_report
import joblib
import os

print("üéØ –û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")

# –ó–∞–≥—Ä—É–∂–∞–µ–º sample –¥–∞–Ω–Ω—ã–µ
try:
    data = pd.read_csv('model_data_sample.csv')
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {data.shape}")
except FileNotFoundError:
    print("‚ùå –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ create_sample_data.py")
    exit()

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
X = data.drop('target', axis=1)
y = data['target']

# –ö–æ–¥–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
label_encoders = {}
X_encoded = X.copy()

categorical_columns = X.select_dtypes(include=['object']).columns

for col in categorical_columns:
    le = LabelEncoder()
    X_encoded[col + '_encoded'] = le.fit_transform(X_encoded[col].astype(str))
    label_encoders[col] = le
    print(f"  –ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: {col}")

# –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
X_final = X_encoded.drop(categorical_columns, axis=1)

print(f"–§–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∏—á–∏: {X_final.columns.tolist()}")

# –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ train/test
X_train, X_test, y_train, y_test = train_test_split(
    X_final, y, test_size=0.2, random_state=42, stratify=y
)

print(f"Train: {X_train.shape}, Test: {X_test.shape}")

# –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
model = RandomForestClassifier(
    n_estimators=50,
    max_depth=10,
    random_state=42,
    class_weight='balanced'
)

print("üîÑ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
model.fit(X_train, y_train)

# –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
y_pred = model.predict(X_test)
y_pred_proba = model.predict_proba(X_test)[:, 1]

roc_auc = roc_auc_score(y_test, y_pred_proba)
accuracy = (y_pred == y_test).mean()

print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏:")
print(f"ROC-AUC: {roc_auc:.4f}")
print(f"Accuracy: {accuracy:.4f}")
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
os.makedirs('models', exist_ok=True)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
joblib.dump(model, 'models/conversion_model.pkl')
print("‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: models/conversion_model.pkl")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º label encoders
joblib.dump(label_encoders, 'models/label_encoders.pkl')
print("‚úÖ Label encoders —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: models/label_encoders.pkl")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏—á–∞—Ö
feature_info = {
    'feature_columns': X_final.columns.tolist(),
    'categorical_columns': categorical_columns.tolist(),
    'numerical_columns': X_final.select_dtypes(include=[np.number]).columns.tolist(),
    'optimal_threshold': 0.5
}

joblib.dump(feature_info, 'models/feature_info.pkl')
print("‚úÖ Feature info —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: models/feature_info.pkl")

print("\nüéâ –ú–û–î–ï–õ–¨ –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–ê!")
print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å API —Å–µ—Ä–≤–∏—Å:")
print("python run_api.py")