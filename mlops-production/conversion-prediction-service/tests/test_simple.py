# tests/test_simple.py (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import pytest
import sys
import os
import pandas as pd
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

def create_test_data_if_needed():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
    if not os.path.exists('model_data_sample.csv'):
        print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        np.random.seed(42)
        
        sample_data = {
            'utm_source_type': ['social', 'direct', 'organic'][:100],
            'device_category': ['mobile', 'desktop'][:100],
            'session_hits_count': np.random.randint(1, 50, 100),
            'unique_event_categories': np.random.randint(1, 10, 100),
            'is_returning_user': np.random.randint(0, 2, 100),
            'target': np.random.randint(0, 2, 100)
        }
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–æ 100 –∑–∞–ø–∏—Å–µ–π
        for key in sample_data:
            if len(sample_data[key]) < 100:
                sample_data[key] = sample_data[key] * (100 // len(sample_data[key]) + 1)
                sample_data[key] = sample_data[key][:100]
        
        df = pd.DataFrame(sample_data)
        df.to_csv('model_data_sample.csv', index=False)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")

def test_data_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    create_test_data_if_needed()
    
    try:
        data = pd.read_csv('model_data_sample.csv')
        assert len(data) > 0, "–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–æ–∫–∏"
        assert 'target' in data.columns, "–î–æ–ª–∂–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è"
        print("‚úÖ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω")
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise

def test_model_files():
    """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏"""
    required_files = [
        'models/conversion_model.pkl',
        'models/label_encoders.pkl', 
        'models/feature_info.pkl'
    ]
    
    all_exist = True
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ –§–∞–π–ª {file_path} –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"‚ö†Ô∏è –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_exist = False
    
    if not all_exist:
        print("\nüí° –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("   python train_simple_model.py")

def test_feature_engineering():
    """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ñ–∏—á–µ–π"""
    try:
        # –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        test_data = {
            'utm_source_type': 'social',
            'device_category': 'mobile',
            'os_type': 'Android',
            'session_hits_count': 10,
            'unique_event_categories': 5,
            'is_returning_user': 0
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        assert isinstance(test_data['session_hits_count'], int)
        assert isinstance(test_data['utm_source_type'], str)
        assert test_data['session_hits_count'] >= 0
        assert test_data['unique_event_categories'] >= 0
        
        print("‚úÖ –¢–µ—Å—Ç —Ñ–∏—á–µ–π –ø—Ä–æ–π–¥–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Ñ–∏—á–µ–π: {e}")

def test_prediction_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        def mock_predict(features):
            # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
            score = 0
            if features.get('utm_source_type') == 'social':
                score += 0.3
            if features.get('is_returning_user') == 1:
                score += 0.2
            if features.get('session_hits_count', 0) > 10:
                score += 0.1
                
            return 1 if score > 0.5 else 0
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
        test_cases = [
            ({'utm_source_type': 'social', 'is_returning_user': 1, 'session_hits_count': 15}, 1),
            ({'utm_source_type': 'other', 'is_returning_user': 0, 'session_hits_count': 5}, 0)
        ]
        
        for features, expected in test_cases:
            result = mock_predict(features)
            assert result == expected, f"–û–∂–∏–¥–∞–ª–æ—Å—å {expected}, –ø–æ–ª—É—á–µ–Ω–æ {result}"
            
        print("‚úÖ –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ª–æ–≥–∏–∫–∏: {e}")

if __name__ == "__main__":
    print("üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í")
    print("=" * 40)
    
    test_data_loading()
    test_model_files() 
    test_feature_engineering()
    test_prediction_logic()
    
    print("=" * 40)
    print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")