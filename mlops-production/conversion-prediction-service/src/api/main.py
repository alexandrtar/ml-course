from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
import joblib
import os
from typing import List, Optional
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="GA Conversion Prediction API",
    description="API –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ Google Analytics –¥–∞–Ω–Ω—ã—Ö",
    version="1.0.0"
)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class PredictionRequest(BaseModel):
    utm_source_type: str
    utm_medium: str
    device_category: str
    os_type: str
    device_browser: str
    day_of_week: int
    hour_of_day: int
    hour_sin: float
    hour_cos: float
    time_of_day: str
    is_weekend: int
    month: int
    is_peak_hours: int
    session_hits_count: int
    unique_event_categories: int
    unique_event_actions: int
    unique_pages: int
    is_returning_user: int
    event_category_group: str
    country_region: str

class PredictionResponse(BaseModel):
    conversion_prediction: int
    conversion_probability: float
    no_conversion_probability: float
    threshold_used: float
    success: bool

class HealthResponse(BaseModel):
    status: str
    model_loaded: bool
    model_version: str = "1.0.0"
    timestamp: str

class ExampleResponse(BaseModel):
    example_request: dict
    available_categories: dict

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
try:
    model = joblib.load('models/conversion_model.pkl')
    label_encoders = joblib.load('models/label_encoders.pkl')
    feature_info = joblib.load('models/feature_info.pkl')
    optimal_threshold = feature_info.get('optimal_threshold', 0.5)

    MODEL_LOADED = True
    logger.info("‚úÖ –ú–æ–¥–µ–ª—å –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–Ω–∫–æ–¥–µ—Ä–∞
    available_categories = {}
    for col, encoder in label_encoders.items():
        available_categories[col] = list(encoder.classes_)
    logger.info("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
    MODEL_LOADED = False
    model = None
    label_encoders = {}
    feature_info = {}
    available_categories = {}
    optimal_threshold = 0.5

def safe_label_transform(encoder, values):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ label encoder —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    try:
        if not hasattr(values, '__iter__') or isinstance(values, str):
            values = [values]

        transformed = []
        for val in values:
            val_str = str(val)
            if val_str in encoder.classes_:
                transformed.append(encoder.transform([val_str])[0])
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º–æ–µ —á–∞—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ fallback
                transformed.append(0)
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ '{val_str}'. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

        return transformed[0] if len(transformed) == 1 else transformed

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {e}")
        return 0

def predict_conversion(features_dict):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"""
    if not MODEL_LOADED:
        return {"error": "–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞", "success": False}

    try:
        # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        input_data = pd.DataFrame([features_dict])

        # –ü—Ä–∏–º–µ–Ω—è–µ–º Label Encoding —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        for col, encoder in label_encoders.items():
            if col in input_data.columns:
                encoded_value = safe_label_transform(encoder, input_data[col].iloc[0])
                input_data[col + '_encoded'] = encoded_value

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏—á–∏
        available_columns = [col for col in feature_info['feature_columns'] if col in input_data.columns]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∏—á
        missing_features = set(feature_info['feature_columns']) - set(available_columns)
        if missing_features:
            return {
                "error": f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∏—á–∏: {missing_features}",
                "success": False
            }

        X_input = input_data[available_columns]

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        prediction_proba = model.predict_proba(X_input)[0]
        conversion_prob = prediction_proba[1]
        no_conversion_prob = prediction_proba[0]

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
        prediction = 1 if conversion_prob >= optimal_threshold else 0

        return {
            "conversion_prediction": prediction,
            "conversion_probability": conversion_prob,
            "no_conversion_probability": no_conversion_prob,
            "threshold_used": optimal_threshold,
            "success": True
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
        return {"error": str(e), "success": False}

@app.get("/", summary="–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
async def root():
    return {
        "message": "GA Conversion Prediction API",
        "status": "active" if MODEL_LOADED else "error",
        "model_loaded": MODEL_LOADED,
        "version": "1.0.0",
        "endpoints": [
            "/docs - –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
            "/health - —Å—Ç–∞—Ç—É—Å API",
            "/model/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏",
            "/example - –ø—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞",
            "/predict - –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏",
            "/categories - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        ]
    }

@app.get("/health", response_model=HealthResponse, summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API")
async def health_check():
    return HealthResponse(
        status="healthy" if MODEL_LOADED else "unhealthy",
        model_loaded=MODEL_LOADED,
        timestamp=datetime.now().isoformat()
    )

@app.get("/model/info", summary="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")
async def model_info():
    if not MODEL_LOADED:
        raise HTTPException(status_code=503, detail="–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

    return {
        "model_type": type(model).__name__,
        "feature_count": len(feature_info['feature_columns']),
        "categorical_features": len(feature_info['categorical_columns']),
        "numerical_features": len(feature_info['numerical_columns']),
        "optimal_threshold": optimal_threshold,
        "feature_columns": feature_info['feature_columns']
    }

@app.get("/categories", summary="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def get_categories():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è"""
    if not MODEL_LOADED:
        raise HTTPException(status_code=503, detail="–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

    return {
        "available_categories": available_categories,
        "message": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫"
    }

@app.get("/example", response_model=ExampleResponse, summary="–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞")
async def get_example():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    example_data = {
        "utm_source_type": "social",
        "utm_medium": "cpc",
        "device_category": "mobile",
        "os_type": "Android",
        "device_browser": "Chrome",
        "day_of_week": 2,
        "hour_of_day": 14,
        "hour_sin": 0.0,
        "hour_cos": 1.0,
        "time_of_day": "afternoon",
        "is_weekend": 0,
        "month": 6,
        "is_peak_hours": 1,
        "session_hits_count": 15,
        "unique_event_categories": 5,
        "unique_event_actions": 8,
        "unique_pages": 10,
        "is_returning_user": 0,
        "event_category_group": "engagement_click",
        "country_region": "cis"
    }

    return ExampleResponse(
        example_request=example_data,
        available_categories=available_categories
    )

@app.post("/predict", response_model=PredictionResponse, summary="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏")
async def predict_conversion_endpoint(request: PredictionRequest):
    """
    –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

    –í–∞–∂–Ω–æ: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ /categories —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    """
    result = predict_conversion(request.dict())

    if not result.get('success', False):
        raise HTTPException(
            status_code=400,
            detail=result.get('error', 'Unknown error')
        )

    return PredictionResponse(**result)

if __name__ == "__main__":
    import uvicorn

    print("üöÄ –ó–∞–ø—É—Å–∫ GA Conversion Prediction API...")
    print("=" * 50)
    print("üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ú–û–î–ï–õ–ò:")
    if MODEL_LOADED:
        print(f"   ‚Ä¢ –ú–æ–¥–µ–ª—å: {type(model).__name__}")
        print(f"   ‚Ä¢ –§–∏—á–∏: {len(feature_info['feature_columns'])}")
        print(f"   ‚Ä¢ –ü–æ—Ä–æ–≥: {optimal_threshold:.4f}")
    print("üåê –î–û–°–¢–£–ü–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´:")
    print("   ‚Ä¢ http://localhost:8000 - –≥–ª–∞–≤–Ω–∞—è")
    print("   ‚Ä¢ http://localhost:8000/docs - –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    print("   ‚Ä¢ http://localhost:8000/health - —Å—Ç–∞—Ç—É—Å")
    print("   ‚Ä¢ http://localhost:8000/model/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")
    print("   ‚Ä¢ http://localhost:8000/example - –ø—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞")
    print("   ‚Ä¢ http://localhost:8000/categories - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    print("=" * 50)

    uvicorn.run(app, host="0.0.0.0", port=8000, log_level="info")