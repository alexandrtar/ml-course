import argparse
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

def main():
    print("üöÄ WORKING Human Segmentation Project")
    print("=" * 50)
    
    try:
        from segmentation import HumanSegmentator
        from evaluation import SegmentationEvaluator
        from visualization import ResultsVisualizer
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        segmentator = HumanSegmentator()
        evaluator = SegmentationEvaluator()
        visualizer = ResultsVisualizer()
        
        print("‚úÖ Components initialized")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
        import cv2
        import numpy as np
        
        print("üñºÔ∏è Creating test scenario...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–∂–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = np.ones((512, 512, 3), dtype=np.uint8) * 255
        
        # –†–∏—Å—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤
        cv2.rectangle(image, (50, 50), (150, 200), (255, 0, 0), -1)  # –°–∏–Ω–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        cv2.circle(image, (300, 150), 60, (0, 255, 0), -1)  # –ó–µ–ª–µ–Ω—ã–π –∫—Ä—É–≥
        cv2.ellipse(image, (400, 350), (80, 40), 0, 0, 360, (0, 0, 255), -1)  # –ö—Ä–∞—Å–Ω—ã–π —ç–ª–ª–∏–ø—Å
        
        print("ü§ñ Running segmentation...")
        mask = segmentator.segment(image)
        
        # –°–æ–∑–¥–∞–µ–º "ground truth" –¥–ª—è –¥–µ–º–æ
        gt_mask = np.zeros((512, 512), dtype=np.float32)
        cv2.rectangle(gt_mask, (50, 50), (150, 200), 1, -1)
        cv2.circle(gt_mask, (300, 150), 60, 1, -1)
        cv2.ellipse(gt_mask, (400, 350), (80, 40), 0, 0, 360, 1, -1)
        
        # –û—Ü–µ–Ω–∫–∞
        metrics = evaluator.evaluate_single(gt_mask, mask)
        
        print("üìä Results:")
        print("-" * 30)
        for key, value in metrics.items():
            print(f"{key}: {value:.4f}")
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        save_path = visualizer.save_results(image, gt_mask, mask, metrics, "demo_test")
        print(f"üíæ Results saved to: {save_path}")
        
        print("üéâ Project is working correctly!")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()