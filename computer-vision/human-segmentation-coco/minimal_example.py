import cv2
import numpy as np
from ultralytics import YOLO
import matplotlib.pyplot as plt

def minimal_segmentation_example():
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–∏–º–µ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("üéØ Minimal YOLO Segmentation Example")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    model = YOLO('yolov8n-seg.pt')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ–∞–ª—å–Ω–æ–≥–æ)
    test_image = np.random.randint(0, 255, (512, 512, 3), dtype=np.uint8)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é
    results = model(test_image, classes=[0], conf=0.25)  # class 0 = person
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É
    mask = np.zeros((512, 512), dtype=np.float32)
    
    for result in results:
        if result.masks is not None:
            for m in result.masks:
                mask = np.logical_or(mask, m.data[0].cpu().numpy())
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    plt.figure(figsize=(12, 4))
    
    plt.subplot(1, 2, 1)
    plt.imshow(test_image)
    plt.title("Test Image")
    plt.axis('off')
    
    plt.subplot(1, 2, 2)
    plt.imshow(mask, cmap='gray')
    plt.title("Segmentation Mask")
    plt.axis('off')
    
    plt.tight_layout()
    plt.savefig('minimal_test_result.png', dpi=150, bbox_inches='tight')
    plt.show()
    
    print(f"‚úÖ Segmentation completed! Mask shape: {mask.shape}")
    print(f"üìÅ Result saved to 'minimal_test_result.png'")

if __name__ == "__main__":
    minimal_segmentation_example()